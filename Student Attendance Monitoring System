#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Attendance {
    int studentID;
    char date[20];        // format: dd-mm-yyyy
    char status[10];      // "Present" or "Absent"
    struct Attendance *next;
} Attendance;

// Function prototypes
Attendance* addRecord(Attendance *head, int id, char date[], char status[]);
Attendance* deleteRecord(Attendance *head, int id, char date[]);
void searchRecord(Attendance *head, int id, char date[]);
void displayByDate(Attendance *head, char date[]);
void displayAll(Attendance *head);
Attendance* reverseList(Attendance *head);
Attendance* cloneList(Attendance *head);

// Utility
Attendance* createNode(int id, char date[], char status[]);

int main() {
    Attendance *head = NULL;
    Attendance *clone = NULL;
    int choice, id;
    char date[20], status[10];

    while (1) {
        printf("\n===== Student Attendance Monitoring System =====\n");
        printf("1. Add Attendance Record\n");
        printf("2. Delete Incorrect Entry\n");
        printf("3. Search Attendance by Student ID and Date\n");
        printf("4. Display Attendance List for a Date\n");
        printf("5. Display All Records\n");
        printf("6. Reverse Attendance Display\n");
        printf("7. Clone Records for Admin Review\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter Student ID: ");
                scanf("%d", &id);
                printf("Enter Date (dd-mm-yyyy): ");
                scanf("%s", date);
                printf("Enter Status (Present/Absent): ");
                scanf("%s", status);
                head = addRecord(head, id, date, status);
                break;

            case 2:
                printf("Enter Student ID to delete: ");
                scanf("%d", &id);
                printf("Enter Date: ");
                scanf("%s", date);
                head = deleteRecord(head, id, date);
                break;

            case 3:
                printf("Enter Student ID: ");
                scanf("%d", &id);
                printf("Enter Date: ");
                scanf("%s", date);
                searchRecord(head, id, date);
                break;

            case 4:
                printf("Enter Date: ");
                scanf("%s", date);
                displayByDate(head, date);
                break;

            case 5:
                displayAll(head);
                break;

            case 6:
                head = reverseList(head);
                printf("Attendance list reversed.\n");
                break;

            case 7:
                clone = cloneList(head);
                printf("Records cloned for admin review:\n");
                displayAll(clone);
                break;

            case 8:
                printf("Exiting...\n");
                exit(0);

            default:
                printf("Invalid choice! Try again.\n");
        }
    }
    return 0;
}

// Function to create a new node
Attendance* createNode(int id, char date[], char status[]) {
    Attendance *newNode = (Attendance*)malloc(sizeof(Attendance));
    newNode->studentID = id;
    strcpy(newNode->date, date);
    strcpy(newNode->status, status);
    newNode->next = NULL;
    return newNode;
}

// Add record
Attendance* addRecord(Attendance *head, int id, char date[], char status[]) {
    Attendance *newNode = createNode(id, date, status);
    if (head == NULL) {
        return newNode;
    }
    Attendance *temp = head;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = newNode;
    return head;
}

// Delete record
Attendance* deleteRecord(Attendance *head, int id, char date[]) {
    if (head == NULL) {
        printf("No records found.\n");
        return head;
    }
    Attendance *temp = head, *prev = NULL;
    while (temp != NULL) {
        if (temp->studentID == id && strcmp(temp->date, date) == 0) {
            if (prev == NULL) {
                head = temp->next;
            } else {
                prev->next = temp->next;
            }
            free(temp);
            printf("Record deleted.\n");
            return head;
        }
        prev = temp;
        temp = temp->next;
    }
    printf("Record not found.\n");
    return head;
}

// Search record
void searchRecord(Attendance *head, int id, char date[]) {
    Attendance *temp = head;
    while (temp != NULL) {
        if (temp->studentID == id && strcmp(temp->date, date) == 0) {
            printf("Record Found: StudentID=%d, Date=%s, Status=%s\n", temp->studentID, temp->date, temp->status);
            return;
        }
        temp = temp->next;
    }
    printf("Record not found.\n");
}

// Display by date
void displayByDate(Attendance *head, char date[]) {
    Attendance *temp = head;
    int found = 0;
    while (temp != NULL) {
        if (strcmp(temp->date, date) == 0) {
            printf("StudentID=%d, Date=%s, Status=%s\n", temp->studentID, temp->date, temp->status);
            found = 1;
        }
        temp = temp->next;
    }
    if (!found) {
        printf("No records found for date %s\n", date);
    }
}

// Display all
void displayAll(Attendance *head) {
    Attendance *temp = head;
    if (temp == NULL) {
        printf("No records available.\n");
        return;
    }
    while (temp != NULL) {
        printf("StudentID=%d, Date=%s, Status=%s\n", temp->studentID, temp->date, temp->status);
        temp = temp->next;
    }
}

// Reverse list
Attendance* reverseList(Attendance *head) {
    Attendance *prev = NULL, *current = head, *next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

// Clone list
Attendance* cloneList(Attendance *head) {
    if (head == NULL) return NULL;
    Attendance *newHead = NULL, *tail = NULL, *temp = head;
    while (temp != NULL) {
        Attendance *newNode = createNode(temp->studentID, temp->date, temp->status);
        if (newHead == NULL) {
            newHead = newNode;
            tail = newHead;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
        temp = temp->next;
    }
    return newHead;
}
